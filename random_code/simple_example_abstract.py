"""Абстрацктный класс, абстрактный метод на простых примерах"""
from abc import ABC, abstractmethod


# Абстрактный класс
class ChessPiece(ABC):
    # Общий метод, который свободно будут использовать все дочерние класса.
    def draw(self):
        print("Нарисовать шахматную фигуру")

    # абстрактный метод, который будет необходимо переопределять
    # для каждого подкласса
    @abstractmethod
    def move(self):
        pass


try:
    a = ChessPiece()
except TypeError:
    print('Нельзя создать экземпляр абстрактного класса')


# Создаем дочерний класс, наследуемый от абстрактного.
class Queen(ChessPiece):
    # Переопределяем абстрактный метод.
    def move(self):
        print('Ход королевы')


# Теперь создается экземпляр дочернего класса
# и применение переопределенного метода.
q = Queen()
q.draw()
q.move()

print('-' * 30)
print('Другой пример')
print('-' * 30)

class Basic(ABC):
    @abstractmethod
    def hello(self):
        print("Привет из класса Basic")


# В наследуемом классе обязательно нужно переопределить или
# дополнить абстрактный метод из родительского класса.
# Иначе ничего работать не будет.
class Advanced(Basic):
    def hello(self):
        super().hello()
        print("Дополненный метод")


a = Advanced()
a.hello()
